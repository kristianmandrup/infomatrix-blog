// Generated by LiveScript 1.2.0
(function(){
  var express, app, Poet, contact, bodyParser, model, router, poet, removeComments, validated, stripTags, marked;
  express = require('express');
  app = express();
  Poet = require('poet');
  app.set('view engine', 'jade');
  app.set('views', __dirname + '/views');
  app.use(express['static'](__dirname + '/public'));
  app.get('/rss', function(req, res){
    var posts;
    posts = poet.helpers.getPosts(0, 5);
    res.setHeader('Content-Type', 'application/rss+xml');
    return res.render('rss', {
      posts: posts
    });
  });
  contact = require('./mail/contact');
  bodyParser = require('body-parser');
  app.use(bodyParser.json());
  app.use(bodyParser.urlencoded({
    extended: true
  }));
  model = require('./data/model');
  router = express.Router();
  poet = Poet(app, {
    metaFormat: 'yaml',
    postsPerPage: 5
  });
  poet.init().then(function(){
    console.log('poet initialized');
    console.log(Object.keys(poet.posts));
    return done();
  });
  removeComments = function(conditions){
    return model.comment.remove(conditions, function(err){
      if (err) {
        return console.error('error', err);
      } else {
        return console.log('all comments with #{conditions} removed');
      }
    });
  };
  router.route('/contact').post(function(req, res){
    return contact(req, function(result){
      return res.json({
        result: result
      });
    });
  });
  validated = {
    comment: function(comment){
      if (typeof comment !== 'object') {
        return false;
      }
      if (comment.postId && comment.author && comment.text) {
        return true;
      }
      return false;
    }
  };
  stripTags = function(text){
    return text.replace(/(<([^>]+)>)/ig, "");
  };
  marked = require('marked');
  router.route('/comment/new').post(function(req, res){
    var data, comment, newComment, e;
    data = req.body;
    try {
      if (data) {
        comment = typeof data === 'string' ? JSON.parse(data) : data;
        if (validated.comment(comment)) {
          comment.text = marked(comment.text);
          comment.author = stripTags(comment.author);
          newComment = new model.comment({
            postId: comment.postId,
            author: comment.author,
            text: comment.text
          });
          newComment.save(function(err){
            if (err) {
              console.log('error', err);
              return res.send('');
            } else {
              return res.send(comment);
            }
          });
        } else {
          return console.log('invalid comment', comment);
        }
      }
    } catch (e$) {
      e = e$;
      console.error('error', e);
      return res.send('');
    }
  });
  app.use('/', router);
  poet.addRoute('/posts', function(req, res){
    var page, lastPost;
    page = 1;
    lastPost = page * 3;
    return res.render('page', {
      posts: poet.helpers.getPosts(lastPost - 3, lastPost),
      page: page
    });
  });
  poet.addRoute('/post/:post', function(req, res){
    var post, query;
    model.comment.remove({
      postId: 16
    });
    post = poet.helpers.getPost(req.params.post);
    if (post) {
      query = {
        postId: post.id
      };
      return model.comment.find().sort({
        date: 'desc'
      }).exec(function(err, result){
        var comments;
        comments = err ? [] : result;
        return res.render('post', {
          post: post,
          comments: comments
        });
      });
    } else {
      return res.send(404);
    }
  });
  module.exports = app;
}).call(this);
