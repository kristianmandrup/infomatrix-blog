// Generated by LiveScript 1.2.0
(function(){
  var lastComment, scrollTo, success, formSelector;
  lastComment = null;
  scrollTo = function(target, speed, cb){
    var top;
    if (typeof speed === 'undefined') {
      speed = 1000;
    }
    top = parseInt($(target).offset().top - 200);
    return $('html, body').animate({
      scrollTop: top
    }, speed, cb);
  };
  success = function(newComment){
    var newCommentElement;
    if (deepEq$(JSON.stringify(newComment), lastComment, '===')) {
      return false;
    }
    lastComment = JSON.stringify(newComment);
    document.querySelector('form#new-comment').reset();
    if (typeof newComment === 'object') {
      newCommentElement = $("<div></div>");
      newCommentElement.addClass('comment').addClass('new');
      newCommentElement.append("<div class='text'>" + newComment.text + "</div>" + "<div class='author'>" + newComment.author + "</div>");
      $('#comments').append(newCommentElement);
      newCommentElement.fadeOut(5);
      return scrollTo(newCommentElement, 1000, function(){
        return newCommentElement.fadeIn(2500, function(){
          return newCommentElement.removeClass('new');
        });
      });
    }
  };
  formSelector = '#new-comment';
  $('button#comment-submit').click(function(e){
    var form, author, text, postId, data, ajaxOptions;
    e.preventDefault();
    console.log('ajax submit');
    form = $(formSelector);
    if (!form) {
      throw Error("form not found: " + formSelector);
    }
    author = $('#comment-author').val();
    text = $('#comment-text').val();
    postId = $('#postId').val();
    data = {
      author: author,
      text: text,
      postId: postId
    };
    ajaxOptions = {
      dataType: 'json',
      data: data,
      method: 'POST',
      url: '/comment/new',
      success: success
    };
    return $.ajax(ajaxOptions).done(success).fail(function(){
      return console.log('ajax post failed');
    });
  });
  function deepEq$(x, y, type){
    var toString = {}.toString, hasOwnProperty = {}.hasOwnProperty,
        has = function (obj, key) { return hasOwnProperty.call(obj, key); };
    var first = true;
    return eq(x, y, []);
    function eq(a, b, stack) {
      var className, length, size, result, alength, blength, r, key, ref, sizeB;
      if (a == null || b == null) { return a === b; }
      if (a.__placeholder__ || b.__placeholder__) { return true; }
      if (a === b) { return a !== 0 || 1 / a == 1 / b; }
      className = toString.call(a);
      if (toString.call(b) != className) { return false; }
      switch (className) {
        case '[object String]': return a == String(b);
        case '[object Number]':
          return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
        case '[object Date]':
        case '[object Boolean]':
          return +a == +b;
        case '[object RegExp]':
          return a.source == b.source &&
                 a.global == b.global &&
                 a.multiline == b.multiline &&
                 a.ignoreCase == b.ignoreCase;
      }
      if (typeof a != 'object' || typeof b != 'object') { return false; }
      length = stack.length;
      while (length--) { if (stack[length] == a) { return true; } }
      stack.push(a);
      size = 0;
      result = true;
      if (className == '[object Array]') {
        alength = a.length;
        blength = b.length;
        if (first) { 
          switch (type) {
          case '===': result = alength === blength; break;
          case '<==': result = alength <= blength; break;
          case '<<=': result = alength < blength; break;
          }
          size = alength;
          first = false;
        } else {
          result = alength === blength;
          size = alength;
        }
        if (result) {
          while (size--) {
            if (!(result = size in a == size in b && eq(a[size], b[size], stack))){ break; }
          }
        }
      } else {
        if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) {
          return false;
        }
        for (key in a) {
          if (has(a, key)) {
            size++;
            if (!(result = has(b, key) && eq(a[key], b[key], stack))) { break; }
          }
        }
        if (result) {
          sizeB = 0;
          for (key in b) {
            if (has(b, key)) { ++sizeB; }
          }
          if (first) {
            if (type === '<<=') {
              result = size < sizeB;
            } else if (type === '<==') {
              result = size <= sizeB
            } else {
              result = size === sizeB;
            }
          } else {
            first = false;
            result = size === sizeB;
          }
        }
      }
      stack.pop();
      return result;
    }
  }
}).call(this);
